// Code generated by "enumer -type tag -trimprefix tag -transform snake"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _tagName = "nothigskip"

var _tagIndex = [...]uint8{0, 6, 10}

func (i tag) String() string {
	if i < 0 || i >= tag(len(_tagIndex)-1) {
		return fmt.Sprintf("tag(%d)", i)
	}
	return _tagName[_tagIndex[i]:_tagIndex[i+1]]
}

var _tagValues = []tag{0, 1}

var _tagNameToValueMap = map[string]tag{
	_tagName[0:6]:  0,
	_tagName[6:10]: 1,
}

// tagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func tagString(s string) (tag, error) {
	if val, ok := _tagNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to tag values", s)
}

// tagValues returns all values of the enum
func tagValues() []tag {
	return _tagValues
}

// IsAtag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i tag) IsAtag() bool {
	for _, v := range _tagValues {
		if i == v {
			return true
		}
	}
	return false
}
